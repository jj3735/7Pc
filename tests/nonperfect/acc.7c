(define make_account (lambda (init:float) (begin
   (define balance init)
   (define transaction (lambda (amt:float) (setq balance (+ balance amt))))
   (export transaction)
   transaction
))//makeaccount

(define myaccount (make_account 100.0))
(define youraccount (make_account(200.0))
(display (myaccount 150.0))  (display "\n")
(display (youraccount ~25.0)) (display "\n") // ~ is negation in scheme syntax

(define transfer (lambda (a:<transaction> b:transaction amt:float) (begin
  (a ~amt) // maybe (a (~ amt)) depending on your parser
  (b amt)
)) //transfer
(transfer myaccount youraccount 100.0)
(display (myaccount 0.0)) (display "\n")
(display (youraccount 0.0)) (display "\n")
(free myaccount)
(free youraccount)
